% ---- INITIAL SEED BUG PREDICTION ---- %
@article{DAmbros2010,
archivePrefix = {arXiv},
arxivId = {arXiv:1402.3873v2},
author = {D'Ambros, Marco and Lanza, Michele and Robbes, Romain},
doi = {10.1109/MSR.2010.5463279},
eprint = {arXiv:1402.3873v2},
isbn = {9781424468034},
issn = {02705257},
journal = {Proceedings - International Conference on Software Engineering},
keywords = {[Electronic Manuscript]},
pages = {31--41},
pmid = {14571374},
title = {{An extensive comparison of bug prediction approaches}},
year = {2010}
}
@inproceedings{Lewis2013,
author = {Lewis, Chris and Lin, Zhongpeng and Sadowski, Caitlin and Zhu, Xiaoyan and Ou, Rong and Whitehead, E. James},
booktitle = {2013 35th International Conference on Software Engineering (ICSE)},
doi = {10.1109/ICSE.2013.6606583},
isbn = {978-1-4673-3076-3},
month = {may},
pages = {372--381},
publisher = {IEEE},
title = {{Does bug prediction support human developers? Findings from a Google case study}},
url = {http://ieeexplore.ieee.org/document/6606583/},
year = {2013}
}
@article{Arisholm2010,
author = {Arisholm, Erik and Briand, Lionel C and Johannessen, Eivind B},
doi = {10.1016/j.jss.2009.06.055},
isbn = {0164-1212},
issn = {01641212},
journal = {Journal of Systems and Software},
keywords = {Cost-effectiveness,Fault prediction models,Verification},
number = {1},
pages = {2--17},
title = {{A systematic and comprehensive investigation of methods to build and evaluate fault prediction models}},
url = {https://ac.els-cdn.com/S0164121209001605/1-s2.0-S0164121209001605-main.pdf?{\_}tid=92a2f1a8-4bd2-4fe0-afdd-6ba58bccd31d{\&}acdnat=1536888305{\_}7d2566bc695559cbb4e74fdee3304bc0},
volume = {83},
year = {2010}
}
@article{Gyimothy2005,
author = {Gyimothy, T. and Ferenc, R. and Siket, I.},
doi = {10.1109/TSE.2005.112},
issn = {0098-5589},
journal = {IEEE Transactions on Software Engineering},
month = {oct},
number = {10},
pages = {897--910},
title = {{Empirical validation of object-oriented metrics on open source software for fault prediction}},
url = {http://ieeexplore.ieee.org/document/1542070/},
volume = {31},
year = {2005}
}
@article{Hall2012,
author = {Hall, T. and Beecham, S. and Bowes, D. and Gray, D. and Counsell, S.},
doi = {10.1109/TSE.2011.103},
issn = {0098-5589},
journal = {IEEE Transactions on Software Engineering},
month = {nov},
number = {6},
pages = {1276--1304},
title = {{A Systematic Literature Review on Fault Prediction Performance in Software Engineering}},
url = {http://ieeexplore.ieee.org/document/6035727/},
volume = {38},
year = {2012}
}
@misc{Catal2009review,
archivePrefix = {arXiv},
arxivId = {arXiv:1011.1669v3},
author = {Catal, Cagatay and Diri, Banu},
booktitle = {Expert Systems with Applications},
doi = {10.1016/j.eswa.2008.10.027},
eprint = {arXiv:1011.1669v3},
isbn = {0957-4174},
issn = {09574174},
keywords = {Automated fault prediction models,Expert systems,Machine learning,Method-level metrics,Public datasets},
number = {4},
pages = {7346--7354},
pmid = {25246403},
title = {{A systematic review of software fault prediction studies}},
url = {https://ac.els-cdn.com/S0957417408007215/1-s2.0-S0957417408007215-main.pdf?{\_}tid=f8b58ec9-c9a8-42d6-8bfd-d73c0f25d69e{\&}acdnat=1536697658{\_}4a8c6621a4a2ac4f49d65e0687927d91},
volume = {36},
year = {2009}
}

% ---- END INITIAL SEED BUG PREDICTION ---- %
@article{DiNucci2018,
author={Di Nucci,D. and Palomba,F. and De Rosa,G. and Bavota,G. and Oliveto,R. and De Lucia,A.},
year={2018},
title={A Developer Centered Bug Prediction Model},
journal={IEEE Transactions on Software Engineering},
volume={44},
number={1},
pages={5-24},
language={English},
url={www.scopus.com}
}
@article{DAmbros2012,
author={D'Ambros,M. and Lanza,M. and Robbes,R.},
year={2012},
title={Evaluating defect prediction approaches: A benchmark and an extensive comparison},
journal={Empirical Software Engineering},
volume={17},
number={4-5},
pages={531-577},
note={Cited By :167},
language={English},
url={www.scopus.com},
}
@article{Catal2011,
author={Catal,C.},
year={2011},
title={Software fault prediction: A literature review and current trends},
journal={Expert Systems with Applications},
volume={38},
number={4},
pages={4626-4636},
note={Cited By :138},
language={English},
url={www.scopus.com},
}
@article{Catal2009investigating,
author={Catal,C. and Diri,B.},
year={2009},
title={Investigating the effect of dataset size, metrics sets, and feature selection techniques on software fault prediction problem},
journal={Information Sciences},
volume={179},
number={8},
pages={1040-1058},
note={Cited By :109},
language={English},
url={www.scopus.com},
}
@article{Lessman2008,
author={Lessmann,S. and Baesens,B. and Mues,C. and Pietsch,S.},
year={2008},
title={Benchmarking classification models for software defect prediction: A proposed framework and novel findings},
journal={IEEE Transactions on Software Engineering},
volume={34},
number={4},
pages={485-496},
note={Cited By :491},
language={English},
url={www.scopus.com},
}
@inproceedings{Herzig2013,
author={Herzig,K. and Just,S. and Zeller,A.},
editor={ },
year={2013},
title={It's not a bug, it's a feature: How misclassification impacts bug prediction},
booktitle={Proceedings - International Conference on Software Engineering},
pages={392-401},
note={Cited By :128},
language={English},
url={www.scopus.com},
}
@article{Gao2011,
author={Gao,K. and Khoshgoftaar,T. M. and Wang,H. and Seliya,N.},
year={2011},
title={Choosing software metrics for defect prediction: An investigation on feature selection techniques},
journal={Software - Practice and Experience},
volume={41},
number={5},
pages={579-606},
note={Cited By :107},
language={English},
url={www.scopus.com},
}
@inproceedings{Kamei2010,
 author = {Kamei, Yasutaka and Matsumoto, Shinsuke and Monden, Akito and Matsumoto, Ken-ichi and Adams, Bram and Hassan, Ahmed E.},
 title = {Revisiting Common Bug Prediction Findings Using Effort-aware Models},
 booktitle = {Proceedings of the 2010 IEEE International Conference on Software Maintenance},
 series = {ICSM '10},
 year = {2010},
 isbn = {978-1-4244-8630-4},
 pages = {1--10},
 numpages = {10},
 url = {http://dx.doi.org/10.1109/ICSM.2010.5609530},
 doi = {10.1109/ICSM.2010.5609530},
 acmid = {1913298},
 publisher = {IEEE Computer Society},
 address = {Washington, DC, USA},
}
@inproceedings{Lamkanfi2011,
 author = {Lamkanfi, Ahmed and Demeyer, Serge and Soetens, Quinten David and Verdonck, Tim},
 title = {Comparing Mining Algorithms for Predicting the Severity of a Reported Bug},
 booktitle = {Proceedings of the 2011 15th European Conference on Software Maintenance and Reengineering},
 series = {CSMR '11},
 year = {2011},
 isbn = {978-0-7695-4343-7},
 pages = {249--258},
 numpages = {10},
 url = {http://dx.doi.org/10.1109/CSMR.2011.31},
 doi = {10.1109/CSMR.2011.31},
 acmid = {1962803},
 publisher = {IEEE Computer Society},
 address = {Washington, DC, USA},
 keywords = {Text Mining, Naive Bayes, Bug Reports, Bug Severity, Bugzilla},
}
@article{Radjenovic2013,
 author = {Radjenovi\'{c}, Danijel and Heri\v{c}ko, Marjan and Torkar, Richard and \v{Z}ivkovi\v{c}, Ale\v{s}},
 title = {Software Fault Prediction Metrics},
 journal = {Information and Software Technology},
 issue_date = {August 2013},
 volume = {55},
 number = {8},
 month = aug,
 year = {2013},
 issn = {0950-5849},
 pages = {1397--1418},
 numpages = {22},
 url = {http://dx.doi.org/10.1016/j.infsof.2013.02.009},
 doi = {10.1016/j.infsof.2013.02.009},
 acmid = {2771005},
 publisher = {Butterworth-Heinemann},
 address = {Newton, MA, USA},
 keywords = {Software fault prediction, Software metric, Systematic literature review},
}
@article{Malhotra2015,
 author = {Malhotra, Ruchika},
 title = {A Systematic Review of Machine Learning Techniques for Software Fault Prediction},
 journal = {Applied Soft Computing},
 issue_date = {February 2015},
 volume = {27},
 number = {C},
 month = feb,
 year = {2015},
 issn = {1568-4946},
 pages = {504--518},
 numpages = {15},
 url = {http://dx.doi.org/10.1016/j.asoc.2014.11.023},
 doi = {10.1016/j.asoc.2014.11.023},
 acmid = {2803085},
 publisher = {Elsevier Science Publishers B. V.},
 address = {Amsterdam, The Netherlands, The Netherlands},
 keywords = {Machine learning, Software fault proneness, Systematic literature review},
}
@inproceedings{Giger2011,
 author = {Giger, Emanuel and Pinzger, Martin and Gall, Harald C.},
 title = {Comparing Fine-grained Source Code Changes and Code Churn for Bug Prediction},
 booktitle = {Proceedings of the 8th Working Conference on Mining Software Repositories},
 series = {MSR '11},
 year = {2011},
 isbn = {978-1-4503-0574-7},
 location = {Waikiki, Honolulu, HI, USA},
 pages = {83--92},
 numpages = {10},
 url = {http://doi.acm.org/10.1145/1985441.1985456},
 doi = {10.1145/1985441.1985456},
 acmid = {1985456},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {code churn, nonlinear regression, prediction models, software bugs, source code changes},
}
@inproceedings{Kim2011,
 author = {Kim, Sunghun and Zhang, Hongyu and Wu, Rongxin and Gong, Liang},
 title = {Dealing with Noise in Defect Prediction},
 booktitle = {Proceedings of the 33rd International Conference on Software Engineering},
 series = {ICSE '11},
 year = {2011},
 isbn = {978-1-4503-0445-0},
 location = {Waikiki, Honolulu, HI, USA},
 pages = {481--490},
 numpages = {10},
 url = {http://doi.acm.org/10.1145/1985793.1985859},
 doi = {10.1145/1985793.1985859},
 acmid = {1985859},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {buggy changes, buggy files, data quality, defect prediction, noise resistance},
}
@article{Jiang2008,
 author = {Jiang, Yue and Cukic, Bojan and Ma, Yan},
 title = {Techniques for Evaluating Fault Prediction Models},
 journal = {Empirical Software Engineering},
 issue_date = {October   2008},
 volume = {13},
 number = {5},
 month = oct,
 year = {2008},
 issn = {1382-3256},
 pages = {561--595},
 numpages = {35},
 url = {http://dx.doi.org/10.1007/s10664-008-9079-3},
 doi = {10.1007/s10664-008-9079-3},
 acmid = {1416836},
 publisher = {Kluwer Academic Publishers},
 address = {Hingham, MA, USA},
 keywords = {Empirical studies, Fault-prediction models, Model evaluation, Predictive models in software engineering},
}
@Article{Bowes2018,
author="Bowes, David
and Hall, Tracy
and Petri{\'{c}}, Jean",
title="Software defect prediction: do different classifiers find the same defects?",
journal="Software Quality Journal",
year="2018",
month="Jun",
day="01",
volume="26",
number="2",
pages="525--552",
issn="1573-1367",
doi="10.1007/s11219-016-9353-3",
url="https://doi.org/10.1007/s11219-016-9353-3"
}
@inproceedings{wWng2011,
  title={How many software metrics should be selected for defect prediction?},
  author={Wang, Huanjing and Khoshgoftaar, Taghi M and Seliya, Naeem},
  booktitle={FLAIRS Conference},
  year={2011}
}
@inproceedings{Jiang2013,
 author = {Jiang, Tian and Tan, Lin and Kim, Sunghun},
 title = {Personalized Defect Prediction},
 booktitle = {Proceedings of the 28th IEEE/ACM International Conference on Automated Software Engineering},
 series = {ASE'13},
 year = {2013},
 isbn = {978-1-4799-0215-6},
 location = {Silicon Valley, CA, USA},
 pages = {279--289},
 numpages = {11},
 url = {https://doi.org/10.1109/ASE.2013.6693087},
 doi = {10.1109/ASE.2013.6693087},
 acmid = {3107693},
 publisher = {IEEE Press},
 address = {Piscataway, NJ, USA},
 keywords = {change classification, machine learning, personalized defect prediction, software reliability},
}
@inproceedings{Ghotra2015,
 author = {Ghotra, Baljinder and McIntosh, Shane and Hassan, Ahmed E.},
 title = {Revisiting the Impact of Classification Techniques on the Performance of Defect Prediction Models},
 booktitle = {Proceedings of the 37th International Conference on Software Engineering - Volume 1},
 series = {ICSE '15},
 year = {2015},
 isbn = {978-1-4799-1934-5},
 location = {Florence, Italy},
 pages = {789--800},
 numpages = {12},
 url = {http://dl.acm.org/citation.cfm?id=2818754.2818850},
 acmid = {2818850},
 publisher = {IEEE Press},
 address = {Piscataway, NJ, USA},
}
@inproceedings{Lee2011,
 author = {Lee, Taek and Nam, Jaechang and Han, DongGyun and Kim, Sunghun and In, Hoh Peter},
 title = {Micro Interaction Metrics for Defect Prediction},
 booktitle = {Proceedings of the 19th ACM SIGSOFT Symposium and the 13th European Conference on Foundations of Software Engineering},
 series = {ESEC/FSE '11},
 year = {2011},
 isbn = {978-1-4503-0443-6},
 location = {Szeged, Hungary},
 pages = {311--321},
 numpages = {11},
 url = {http://doi.acm.org/10.1145/2025113.2025156},
 doi = {10.1145/2025113.2025156},
 acmid = {2025156},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {defect prediction, micro interaction metrics, mylyn},
}
@inproceedings{Matsumoto2010,
 author = {Matsumoto, Shinsuke and Kamei, Yasutaka and Monden, Akito and Matsumoto, Ken-ichi and Nakamura, Masahide},
 title = {An Analysis of Developer Metrics for Fault Prediction},
 booktitle = {Proceedings of the 6th International Conference on Predictive Models in Software Engineering},
 series = {PROMISE '10},
 year = {2010},
 isbn = {978-1-4503-0404-7},
 location = {Timi\şoara, Romania},
 pages = {18:1--18:9},
 articleno = {18},
 numpages = {9},
 url = {http://doi.acm.org/10.1145/1868328.1868356},
 doi = {10.1145/1868328.1868356},
 acmid = {1868356},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {developer metrics, fault prediction, human factor},
}
@ARTICLE{Shepperd2014,
author={M. Shepperd and D. Bowes and T. Hall},
journal={IEEE Transactions on Software Engineering},
title={Researcher Bias: The Use of Machine Learning in Software Defect Prediction},
year={2014},
volume={40},
number={6},
pages={603-616},
keywords={learning (artificial intelligence);object-oriented programming;reverse engineering;software metrics;software performance evaluation;statistical analysis;machine learning;software defect prediction;defect-prone software component prediction;performance evaluation;reverse engineering;common response variable;random effects ANOVA model;model building factors;classifier factor;data set factor;input metrics factor;researcher group factor;researcher bias;blind analysis;reporting protocol improvement;intergroup studies;Software;Predictive models;Correlation;Data models;Buildings;Software engineering;Measurement;Software defect prediction;meta-analysis;researcher bias},
doi={10.1109/TSE.2014.2322358},
ISSN={0098-5589},
month={June}
}
@inproceedings{khoshgoftaar2010,
  title={Attribute selection and imbalanced data: Problems in software defect prediction},
  author={Khoshgoftaar, Taghi M and Gao, Kehan and Seliya, Naeem},
  booktitle={Tools with Artificial Intelligence (ICTAI), 2010 22nd IEEE International Conference on},
  volume={1},
  pages={137--144},
  year={2010},
  organization={IEEE}
}
@inproceedings{Moser2008,
 author = {Moser, Raimund and Pedrycz, Witold and Succi, Giancarlo},
 title = {A Comparative Analysis of the Efficiency of Change Metrics and Static Code Attributes for Defect Prediction},
 booktitle = {Proceedings of the 30th International Conference on Software Engineering},
 series = {ICSE '08},
 year = {2008},
 isbn = {978-1-60558-079-1},
 location = {Leipzig, Germany},
 pages = {181--190},
 numpages = {10},
 url = {http://doi.acm.org/10.1145/1368088.1368114},
 doi = {10.1145/1368088.1368114},
 acmid = {1368114},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {cost-sensitive classification, defect prediction, software metrics},
}
@ARTICLE{Song2011,
author={Q. Song and Z. Jia and M. Shepperd and S. Ying and J. Liu},
journal={IEEE Transactions on Software Engineering},
title={A General Software Defect-Proneness Prediction Framework},
year={2011},
volume={37},
number={3},
pages={356-370},
keywords={learning (artificial intelligence);software fault tolerance;software performance evaluation;software defect proneness prediction framework;scheme evaluation;competing learning schemes;defect predictor;Software;Training data;Predictive models;Buildings;Data models;Prediction algorithms;Training;Software defect prediction;software defect-proneness prediction;machine learning;scheme evaluation.},
doi={10.1109/TSE.2010.90},
ISSN={0098-5589},
month={May},}
=======
%% Place TeX-style references in this file.

@inproceedings{LBB2013,
 author = {Linares-V\'{a}squez, Mario and Bavota, Gabriele and Bernal-C\'{a}rdenas, Carlos and Di Penta, Massimiliano and Oliveto, Rocco and Poshyvanyk, Denys},
 title = {API Change and Fault Proneness: A Threat to the Success of Android Apps},
 booktitle = {Proceedings of the 2013 9th Joint Meeting on Foundations of Software Engineering},
 series = {ESEC/FSE 2013},
 year = {2013},
 isbn = {978-1-4503-2237-9},
 location = {Saint Petersburg, Russia},
 pages = {477--487},
 numpages = {11},
 url = {http://doi.acm.org/10.1145/2491411.2491428},
 doi = {10.1145/2491411.2491428},
 acmid = {2491428},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {API changes, Android, Empirical Studies, Mining Software Repositories},
}

@ARTICLE{BLB2015,
author={G. Bavota and M. Linares-Vásquez and C. E. Bernal-Cárdenas and M. D. Penta and R. Oliveto and D. Poshyvanyk},
journal={IEEE Transactions on Software Engineering},
title={The Impact of API Change- and Fault-Proneness on the User Ratings of Android Apps},
year={2015},
volume={41},
number={4},
pages={384-407},
keywords={application program interfaces;data mining;mobile computing;program debugging;software fault tolerance;system recovery;API change-proneness;API fault-proneness;user ratings;Android Apps;mobile Apps market;information technology;software repository mining;Androids;Humanoid robots;Software;History;Computer bugs;Educational institutions;Electronic mail;Mining software repositories;empirical studies;android;API changes;Mining software repositories;empirical studies;android;API changes},
doi={10.1109/TSE.2014.2367027},
ISSN={0098-5589},
month={April},}

@INPROCEEDINGS{PSG2015,
author={S. Panichella and A. Di Sorbo and E. Guzman and C. A. Visaggio and G. Canfora and H. C. Gall},
booktitle={2015 IEEE International Conference on Software Maintenance and Evolution (ICSME)},
title={How can i improve my app? Classifying user reviews for software maintenance and evolution},
year={2015},
volume={},
number={},
pages={281-290},
keywords={natural language processing;pattern classification;software maintenance;text analysis;user review classification;software maintenance;software evolution;app stores;review comments;star ratings;user feedback identification;app review classification;natural language processing;text analysis;sentiment analysis;Taxonomy;Software maintenance;Feature extraction;Natural language processing;Mobile communication;Maintenance engineering;Text analysis;User Reviews;Mobile Applications;Natural Language Processing;Sentiment Analysis;Text classification},
doi={10.1109/ICSM.2015.7332474},
ISSN={},
month={Sept},}

@Book{xie2015,
  title = {Dynamic Documents with {R} and knitr},
  author = {Yihui Xie},
  publisher = {Chapman and Hall/CRC},
  address = {Boca Raton, Florida},
  year = {2015},
  edition = {2nd},
  note = {ISBN 978-1498716963},
  url = {http://yihui.name/knitr/},
}

@article{cesar2017a,
  title = {Frequent Releases in Open Source Software: A Systematic Review},
  author = {Cesar Brand{\~a}o Gomes da Silva, Antonio and de Figueiredo Carneiro, Glauco and Brito e Abreu, Fernando and Pessoa Monteiro, Miguel},
  year = {2017},
  key = {cesar2017frequent},
  publisher = {Multidisciplinary Digital Publishing Institute},
  pages = {109},
  journal = {Information},
  number = {3},
  volume = {8}
}
@article{rodriguez2017a,
  title = {Continuous deployment of software intensive products and services: A systematic mapping study},
  author = {Rodr{\'\i}guez, Pilar and Haghighatkhah, Alireza and Lwakatare, Lucy Ellen and Teppola, Susanna and Suomalainen, Tanja and Eskeli, Juho and Karvonen, Teemu and Kuvaja, Pasi and Verner, June M and Oivo, Markku},
  year = {2017},
  key = {rodriguez2017continuous},
  publisher = {Elsevier},
  pages = {263--291},
  journal = {Journal of Systems and Software},
  volume = {123}
}
@inproceedings{dyck2015a,
  title = {Towards definitions for release engineering and devops},
  author = {Dyck, Andrej and Penners, Ralf and Lichter, Horst},
  year = {2015},
  url = {https://www2.swc.rwth-aachen.de/docs/RELENG2015/DevOpsVsRelEng.pdf},
  key = {dyck2015towards},
  booktitle = {Release Engineering (RELENG), 2015 IEEE/ACM 3rd International Workshop on},
  organization = {IEEE},
  pages = {3--3}
}
@article{spinellis2018a,
  title = {The Challenges and Practices of Release Engineering},
  author = {Spinellis, Diomidis},
  year = {2018},
  key = {spinellis2018challenges},
  publisher = {IEEE},
  pages = {4--7},
  journal = {IEEE Software},
  number = {2},
  volume = {35}
}
@article{chen2015a,
  title = {Continuous delivery: Huge benefits, but challenges too},
  author = {Chen, Lianping},
  year = {2015},
  key = {chen2015continuous},
  publisher = {IEEE},
  pages = {50--54},
  journal = {IEEE Software},
  number = {2},
  volume = {32}
}
@inproceedings{adams2015a,
  title = {3rd International Workshop on Release Engineering (RELENG 2015)},
  author = {Adams, B. and Bellomo, S. and Bird, C. and Khomh, F. and Moir, K.},
  year = {2015},
  url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84951851911\&doi=10.1109%2fICSE.2015.321\&partnerID=40\&md5=4b9e0d9d5346e0b8926c9e2d34a7170d},
  abstract = {Release engineering deals with all activities inbetween regular development and actual usage of asoftware product by the end user, i.e., integration, build, testexecution, packaging and delivery of software. Although re-search on this topic goes back for decades, the increasing heterogeneity and variability of software products along withthe recent trend to reduce the release cycle to days or even hoursstarts to question some of the common beliefs and practicesof the field. For example, a project like Mozilla Firefox releasesevery 6 weeks, generating updates for dozens of existing Fire-fox versions on 5 desktop, 2 mobile and 3 mobile desktopplatforms, each of which for more than 80 locales. In this con-text, the International Workshop on Release Engineering(RELENG) aims to provide a highly interactive forum for re-searchers and practitioners to address the challenges of, findsolutions for and share experiences with release engineering, and to build connections between the various communities. © 2015 IEEE.},
  key = {Adams2015995},
  pages = {995-996},
  journal = {Proceedings - International Conference on Software Engineering},
  volume = {2},
  note = {cited By 0}
}
@article{adams2018a,
  title = {Release engineering 3.0},
  author = {Adams, B. and Bellomo, S. and Bird, C. and Debic, B. and Khomh, F. and Moir, K. and Oduinn, J.},
  year = {2018},
  url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85043684495\&doi=10.1109%2fMS.2018.1661327\&partnerID=40\&md5=c000884fdb4b114f77472743483801c3},
  abstract = {This theme issue aims to stimulate industry practitioners and researchers to reflect on what future release-engineering practices and tools could look like and how they could evolve out of more-advanced forms of current release engineering. Each of the four articles in this issue highlights a different facet of release engineering, with two articles focusing on fundamental technologies and practices and two articles discussing new application domains. © 1984-2012 IEEE.},
  key = {Adams201822},
  pages = {22-25},
  journal = {IEEE Software},
  number = {2},
  volume = {35},
  note = {cited By 0}
}
@article{laukkanen2018a,
  title = {Comparison of release engineering practices in a large mature company and a startup},
  author = {Laukkanen, E. and Paasivaara, M. and Itkonen, J. and Lassenius, C.},
  year = {2018},
  url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85044460784\&doi=10.1007%2fs10664-018-9616-7\&partnerID=40\&md5=dcca7b080050cb81ac889e6eede2b3cc},
  abstract = {Modern release engineering practices provide multiple benefits for software companies, but organizations have struggled when trying to adopt the most advanced practices, such as continuous delivery. It is not known in which contexts the most advanced practices are applicable and what can be achieved by adopting them. In this study, we discuss the effect of the organizational context on adopted release engineering practices and what outcomes are achieved with the practices. We study two organizational contexts: the startup and the large mature company context. The effect of the product context is mitigated by studying two case organizations with similar products, a rare research opportunity. We performed 18 interviews with various roles in the case organizations. The number of production environments, the number of customers, the control over the production environment, the available resources, the organization size and the distribution of the organization affected the release engineering practices and the ability to release frequently. Having less internal verification and more customer verification enabled fast feedback and customer experimentation in the startup context, but increased the number of production defects. However, having more internal verification in the large mature company context surprisingly did not prevent production defects. The organizational context had a large effect on how achievable modern release engineering practices, such as continuous delivery, were. In the startup context, the lack of resources was the main factor hindering the improvement of release engineering practices, while in the large mature company context, the number of stakeholders and products were the main factors. © 2018 The Author(s)},
  key = {Laukkanen20181},
  pages = {1-43},
  journal = {Empirical Software Engineering},
  note = {cited By 0; Article in Press}
}
@article{souza2015a,
  title = {Rapid releases and patch backouts: A software analytics approach},
  author = {Souza, R. and Chavez, C. and Bittencourt, R.A.},
  year = {2015},
  url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84925218343\&doi=10.1109%2fMS.2015.30\&partnerID=40\&md5=d624ac5b06a61704543a6d72af3981a1},
  abstract = {Mozilla's decision to release a new version of its products every six weeks (instead of every year) profoundly affected developers and users and was accompanied by significant changes in the release process. Were such changes enough to allow Mozilla to move faster without breaking things? What lessons can be learned from Mozilla's adoption of rapid releases? To answer these questions, researchers analyzed tens of thousands of commits and bug reports from Firefox and talked to its developers. The results show that, because of integration repositories, build sheriffs, and better testing tools, broken patches were backed out (reverted) earlier, rendering the release process more stable. © 2015 IEEE.},
  key = {Souza201589},
  pages = {89-96},
  journal = {IEEE Software},
  number = {2},
  volume = {32},
  note = {cited By 9}
}
@inproceedings{fujibayashi2017a,
  title = {Does the release cycle of a library project influence when it is adopted by a client project?},
  author = {Fujibayashi, D. and Ihara, A. and Suwa, H. and Kula, R.G. and Matsumoto, K.},
  year = {2017},
  url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85018384049\&doi=10.1109%2fSANER.2017.7884681\&partnerID=40\&md5=83955b8bec9726f3eb1bc751b3c5f2f8},
  abstract = {A key goal of this research is to understand the relationship between adoption of software library versions and its release cycle. In detail, we conducted an empirical study of the release cycle of 23 libraries and how they were adopted by 415 Apache Software Foundation (ASF) client projects. Our preliminary findings show that software projects are quicker to update earlier rapid-release libraries compared to library projects with a longer release cycle. © 2017 IEEE.},
  key = {Fujibayashi2017569},
  pages = {569-570},
  journal = {SANER 2017 - 24th IEEE International Conference on Software Analysis, Evolution, and Reengineering},
  note = {cited By 0}
}
@inproceedings{claes2017a,
  title = {Abnormal Working Hours: Effect of Rapid Releases and Implications to Work Content},
  author = {Claes, M. and Mantyla, M. and Kuutila, M. and Adams, B.},
  year = {2017},
  url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85026506528\&doi=10.1109%2fMSR.2017.3\&partnerID=40\&md5=2da8fa8a15b9ffb4b1969663af15ecac},
  abstract = {During the past years, overload at work leading to psychological diseases, such as burnouts, have drawn more public attention. This paper is a preliminary step toward an analysis of the work patterns and possible indicators of overload and time pressure on software developers with mining software repositories approach. We explore the working pattern of developers in the context of Mozilla Firefox, a large and long-lived open source project. To that end we investigate the impact of the move from traditional to rapid release cycle on work pattern. Moreover we compare Mozilla Firefox work pattern with another Mozilla product, Firefox OS, which has a different release cycle than Firefox. We find that both projects exhibit healthy working patterns, i.e. lower activity during the weekends and outside of office hours. Firefox experiences proportionally more activity on weekends than Firefox OS (Cohen's d = 0.94). We find that switching to rapid releases has reduced weekend work (Cohen's d = 1.43) and working during the night (Cohen's d = 0.45). This result holds even when we limit the analyzes on the hired resources, i.e. considering only individuals with Mozilla foundation email address, although, the effect sizes are smaller for weekends (Cohen's d = 0.64) and nights (Cohen's d = 0.23). Moreover, we use dissimilarity word clouds and find that work during the weekend is more technical while work during the week expresses more positive sentiment with words like 'good' and 'nice'. Our results suggest that moving to rapid releases have positive impact on the work health and work-life-balance of software engineers. However, caution is needed as our results are based on a limited set of quantitative data from a single organization. © 2017 IEEE.},
  key = {Claes2017243},
  pages = {243-247},
  journal = {IEEE International Working Conference on Mining Software Repositories},
  note = {cited By 3}
}
@article{karvonen2017a,
  title = {Systematic literature review on the impacts of agile release engineering practices},
  author = {Karvonen, T. and Behutiye, W. and Oivo, M. and Kuvaja, P.},
  year = {2017},
  url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85028272067\&doi=10.1016%2fj.infsof.2017.01.009\&partnerID=40\&md5=001c120eea2481c21dae5a551b44dd39},
  abstract = {Context Agile release engineering (ARE) practices are designed to deliver software faster and cheaper to end users; hence, claims of such impacts should be validated by rigorous and relevant empirical studies. Objective The study objective was to analyze both direct and indirect impacts of ARE practices as well as to determine how they have been empirically studied. Method The study applied the systematic literature review research method. ARE practices were identified in empirical studies by searching articles for “rapid release,” “continuous integration,” “continuous delivery,” and “continuous deployment.” We systematically analyzed 619 articles and selected 71 primary studies for deeper investigation. The impacts of ARE practices were analyzed from three viewpoints: impacts associated with adoption of the practice, prevalence of the practice, and success of software development. Results The results indicated that ARE practices can create shorter lead times and better communication within and between development teams. However, challenges and drawbacks were also found in change management, software quality assurance, and stakeholder acceptance. The analysis revealed that 33 out of 71 primary studies were casual experience reports that had neither an explicit research method nor a data collection approach specified, and 23 out of 38 empirical studies applied qualitative methods, such as interviews, among practitioners. Additionally, 12 studies applied quantitative methods, such as mining of software repositories. Only three empirical studies combined these research approaches. Conclusion ARE practices can contribute to improved efficiency of the development process. Moreover, release stakeholders can develop a better understanding of the software project's status. Future empirical studies should consider the comprehensive reporting of the context and how the practice is implemented instead of merely referring to usage of the practice. In addition, different stakeholder points of view, such as customer perceptions regarding ARE practices, still clearly require further research. © 2017 Elsevier B.V.},
  key = {Karvonen201787},
  pages = {87-100},
  journal = {Information and Software Technology},
  volume = {86},
  note = {cited By 5}
}
@inproceedings{castelluccio2017a,
  title = {Is it safe to uplift this patch? An empirical study on mozilla firefox},
  author = {Castelluccio, M. and An, L. and Khomh, F.},
  year = {2017},
  url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85040634374\&doi=10.1109%2fICSME.2017.82\&partnerID=40\&md5=db36b40c2534743b53a2379157b50a59},
  abstract = {In rapid release development processes, patches that fix critical issues, or implement high-value features are often promoted directly from the development channel to a stabilization channel, potentially skipping one or more stabilization channels. This practice is called patch uplift. Patch uplift is risky, because patches that are rushed through the stabilization phase can end up introducing regressions in the code. This paper examines patch uplift operations at Mozilla, with the aim to identify the characteristics of uplifted patches that introduce regressions. Through statistical and manual analyses, we quantitatively and qualitatively investigate the reasons behind patch uplift decisions and the characteristics of uplifted patches that introduced regressions. Additionally, we interviewed three Mozilla release managers to understand organizational factors that affect patch uplift decisions and outcomes. Results show that most patches are uplifted because of a wrong functionality or a crash. Uplifted patches that lead to faults tend to have larger patch size, and most of the faults are due to semantic or memory errors in the patches. Also, release managers are more inclined to accept patch uplift requests that concern certain specific components, and-or that are submitted by certain specific developers. © 2017 IEEE.},
  key = {Castelluccio2017411},
  pages = {411-421},
  journal = {Proceedings - 2017 IEEE International Conference on Software Maintenance and Evolution, ICSME 2017},
  note = {cited By 0}
}
@inproceedings{kerzazi2013a,
  title = {Kanbanize the release engineering process},
  author = {Kerzazi, N. and Robillard, P.N.},
  year = {2013},
  url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84886059813\&doi=10.1109%2fRELENG.2013.6607689\&partnerID=40\&md5=73eb9fc8ca1f9b6568975ff0c054308c},
  abstract = {Release management process must be adapted when IT organizations scale up to avoid discontinuity at the release flow and to preserve the software quality. This paper reports on means to improve the release process in a large-scale project. It discusses the rationale behind adopting Kanban principles for release management, how to implement these principles within a transitional approach, and what are the benefits. The paper discusses the post-transitional product to assess the status of the outcomes. © 2013 IEEE.},
  key = {Kerzazi20139},
  pages = {9-12},
  journal = {2013 1st International Workshop on Release Engineering, RELENG 2013 - Proceedings},
  note = {cited By 3}
}
@article{kaur2019a,
  title = {On Understanding the Release Patterns of Open Source Java Projects},
  author = {Kaur, A. and Vig, V.},
  year = {2019},
  url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85049941993\&doi=10.1007%2f978-981-10-8055-5_2\&partnerID=40\&md5=7a255f14762205c60f618cfb97569650},
  abstract = {Release length is of great significance to companies as well as to researchers as it provides a deeper insight into the rules and practices followed by the applications. It has been observed that many Open Source projects follow agile practices of parallel development and Rapid Releases (RR) but, very few studies till date, have analyzed release patterns of these Open Source projects. This paper analyzes ten Open Source Java projects (Apache Server Foundation) comprising 718 releases to study the evolution of release lengths. The results of the study show that: (1) eight out of ten datasets followed RR models. (2) None of these datasets followed RR models since their first release. (3) The average release length was found to be four months for major versions and one month for minor versions (exceptions removed). (4) There exists a negative correlation between number of contributors and release length. © 2019, Springer Nature Singapore Pte Ltd.},
  key = {Kaur20199},
  pages = {9-18},
  journal = {Advances in Intelligent Systems and Computing},
  volume = {711},
  note = {cited By 0}
}
@inproceedings{teixeira2017a,
  title = {Release Early, Release Often and Release on Time. An Empirical Case Study of Release Management},
  author = {Teixeira, Jose},
  year = {2017},
  url = {http://doi.org/10.1007/978-3-319-57735-7_16},
  abstract = {The dictum of ``Release early, release often.'' by Eric Raymond as the Linux modus operandi highlights the importance of release management in open source software development. Nevertheless, there are very few empirical studies addressing release management in open source software development. It is already known that most open source software communities adopt either feature-based or time-based release strategies. Each of these has its advantages and disadvantages that are context-specific. Recent research reported that many prominent open source software projects have moved from feature-based to time-based releases. In this longitudinal case study, we narrate how OpenStack shifted towards a liberal six-month release cycle. If prior research discussed why projects should adopt time-based releases and how they can adopt such a strategy, we discuss how OpenStack adapted its software development processes, its organizational design and its tools toward a hybrid release management strategy --- a strive for balancing the benefits and drawbacks of feature-based and time-based release strategies.},
  doi = {10.1007/978-3-319-57735-7_16},
  editors = {Balaguer, Federico and Di Cosmo, Roberto and Garrido, Alejandra and Kon, Fabio and Robles, Gregorio and Zacchiroli, Stefano},
  booktitle = {Open Source Systems: Towards Robust Practices},
  publisher = {Springer International Publishing},
  address = {Cham},
  pages = {167--181},
  note = {Paper extracted manually from book at URL.}
}
@phdthesis{poo-caama2016a,
  title = {Release management in free and open source software ecosystems},
  author = {Poo-Caama{\~n}o, Germ{\'a}n},
  year = {2016},
  url = {http://dspace.library.uvic.ca/handle/1828/7648},
  key = {poo2016release}
}
@article{mantyla2015a,
  title = {On rapid releases and software testing: a case study and a semi-systematic literature review},
  author = {M{\"a}ntyl{\"a}, Mika V. and Adams, Bram and Khomh, Foutse and Engstr{\"o}m, Emelie and Petersen, Kai},
  year = {2015},
  url = {https://doi.org/10.1007/s10664-014-9338-4},
  abstract = {Large open and closed source organizations like Google, Facebook and Mozilla are migrating their products towards rapid releases. While this allows faster time-to-market and user feedback, it also implies less time for testing and bug fixing. Since initial research results indeed show that rapid releases fix proportionally less reported bugs than traditional releases, this paper investigates the changes in software testing effort after moving to rapid releases in the context of a case study on Mozilla Firefox, and performs a semi-systematic literature review. The case study analyzes the results of 312,502 execution runs of the 1,547 mostly manual system-level test cases of Mozilla Firefox from 2006 to 2012 (5 major traditional and 9 major rapid releases), and triangulates our findings with a Mozilla QA engineer. We find that rapid releases have a narrower test scope that enables a deeper investigation of the features and regressions with the highest risk. Furthermore, rapid releases make testing more continuous and have proportionally smaller spikes before the main release. However, rapid releases make it more difficult to build a large testing community , and they decrease test suite diversity and make testing more deadline oriented. In addition, our semi-systematic literature review presents the benefits, problems and enablers of rapid releases from 24 papers found using systematic search queries and a similar amount of papers found through other means. The literature review shows that rapid releases are a prevalent industrial practice that are utilized even in some highly critical domains of software engineering, and that rapid releases originated from several software development methodologies such as agile, open source, lean and internet-speed software development. However, empirical studies proving evidence of the claimed advantages and disadvantages of rapid releases are scarce.},
  key = {Mäntylä2015},
  pages = {1384--1425},
  journal = {Empirical Software Engineering},
  number = {5},
  volume = {20},
  note = {Had found "https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=\&arnumber=7006390", this paper is second reference on page 2}
}
@inproceedings{plewnia2014a,
  title = {On the influence of release engineering on software reputation},
  author = {Plewnia, Christian and Dyck, Andrej and Lichter, Horst},
  year = {2014},
  key = {plewnia2014influence},
  booktitle = {Mountain View, CA, USA: In 2nd International Workshop on Release Engineering},
  note = {Had found "https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=\&arnumber=7006390", this paper is first reference on page 2}
}
@article{khomh2015a,
  title = {Understanding the impact of rapid releases on software quality},
  author = {Khomh, Foutse and Adams, Bram and Dhaliwal, Tejinder and Zou, Ying},
  year = {2015},
  url = {https://doi.org/10.1007/s10664-014-9308-x},
  abstract = {Many software companies are shifting from the traditional multi-month release cycle to shorter release cycles. For example, Google Chrome and Mozilla Firefox release new versions every 6 weeks. These shorter release cycles reduce the users' waiting time for a new release and offer better feedback and marketing opportunities to companies, but it is unclear if the quality of the software product improves as well, since developers and testers are under more pressure. In this paper, we extend our previous empirical study of Mozilla Firefox on the impact of rapid releases on quality assurance with feedback by Mozilla project members. The study compares crash rates, median uptime, and the proportion of pre- and post-release bugs in traditional releases with those in rapid releases, and we also analyze the source code changes made by developers to identify potential changes in the development process. We found that (1) with shorter release cycles, users do not experience significantly more pre- or post-release bugs (percentage-wise) and (2) bugs are fixed faster, yet (3) users experience these bugs earlier during software execution (the program crashes earlier). Increased integration activity and propagation of harder bugs to later versions account for some of these findings. Overall, our case study suggests that a clear release engineering process with thorough automation is one of the major challenges when switching to rapid releases.},
  key = {Khomh2015},
  pages = {336--373},
  journal = {Empirical Software Engineering},
  number = {2},
  volume = {20}
}
@inproceedings{khomh2012a,
  title = {Do Faster Releases Improve Software Quality?: An Empirical Case Study of Mozilla Firefox},
  author = {Khomh, Foutse and Dhaliwal, Tejinder and Zou, Ying and Adams, Bram},
  year = {2012},
  url = {http://dl.acm.org/citation.cfm?id=2664446.2664475},
  keywords = {bugs, release cycle, software quality, software release, testing},
  key = {Khomh:2012:FRI:2664446.2664475},
  booktitle = {Proceedings of the 9th IEEE Working Conference on Mining Software Repositories},
  publisher = {IEEE Press},
  address = {Piscataway, NJ, USA},
  series = {MSR '12},
  pages = {179--188}
}
@inproceedings{d2014a,
  title = {An Empirical Study of Delays in the Integration of Addressed Issues},
  author = {d. Costa, D. A. and Abebe, S. L. and Mcintosh, S. and Kulesza, U. and Hassan, A. E.},
  year = {2014},
  url = {https://doi.org/10.1109/ICSME.2014.50},
  keywords = {sensitivity analysis;software engineering;empirical analysis;software engineering;addressed issue integration;ArgoUML project;Eclipse project;Firefox project;release cycle;ROC area;receiver operator curve area;integrator workload;influential factor;integration delay models;nonnegligible delays;software system;Delays;Databases;Software;Unified modeling language;Educational institutions;Receivers},
  key = {6976094},
  booktitle = {2014 IEEE International Conference on Software Maintenance and Evolution},
  pages = {281-290}
}
@inproceedings{da2016a,
  title = {The Impact of Switching to a Rapid Release Cycle on the Integration Delay of Addressed Issues - An Empirical Study of the Mozilla Firefox Project},
  author = {da Costa, D. A. and McIntosh, S. and Kulesza, U. and Hassan, A. E.},
  year = {2016},
  url = {https://doi.org/10.1109/MSR.2016.045},
  keywords = {project management;software development management;software projects release frequency;code integration phase;integration delay;Mozilla Firefox Project;rapid release cycle;Computer bugs;Software;Delays;Marine vehicles;History;Context;Delivery delay;Release engineering;Empirical study},
  key = {7832916},
  booktitle = {2016 IEEE/ACM 13th Working Conference on Mining Software Repositories (MSR)},
  pages = {374-385}
}
@inproceedings{adams2016a,
  title = {Modern release engineering in a nutshell--why researchers should care},
  author = {Adams, Bram and McIntosh, Shane},
  year = {2016},
  url = {https://doi.org/10.1109/SANER.2016.108},
  key = {adams2016modern},
  booktitle = {Software Analysis, Evolution, and Reengineering (SANER), 2016 IEEE 23rd International Conference on},
  organization = {IEEE},
  pages = {78--90},
  volume = {5}
}
